name: Project-mh workflow_v2_try-010_add SSL_008

on: 
  push:
    branches: [main]

jobs:

  
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    # needs: tests
    steps:
      # Проверка доступности репозитория Docker Hub для workflow
      - name: Check out the repo
        uses: actions/checkout@v2
      # Вызов сборщика контейнеров docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Запуск скрипта авторизации на Docker Hub 
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Пуш образа в Docker Hub 
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          # context: ./backend/
          push: true
          tags: alexeysubudaev/project-mh
  
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm project-mh
            sudo docker-compose rm nginx
            sudo docker image rm alexeysubudaev/project-mh -f
            sudo docker image pull alexeysubudaev/project-mh
            # rm -f .env
            # touch .env
            # echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            # echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            # echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            # echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            # echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            # echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            # echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            sudo docker-compose up -d
            # sleep 10

            # # Проверка наличия сертификатов
            # if [ ! -f /etc/letsencrypt/live/project-mh.ddns.net/fullchain.pem ]; then
            #   echo "Сертификаты не найдены, получение сертификатов..."
            #   sudo docker-compose run --rm certbot certonly --webroot --email ${{ secrets.EMAIL }} --agree-tos --no-eff-email -d project-mh.ddns.net -d www.project-mh.ddns.net --webroot-path=/var/www/certbot
            # else
            #   echo "Сертификаты уже существуют, пропускаем получение."
            # fi

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
            ${{ github.workflow }} успешно выполнен!
